import argparse
from typing import List, Dict

import requests

with open("vk_token.txt") as file:
    ACCESS_TOKEN = file.readline().strip()
    USER_ID =file.readline().strip()



def get_user_info(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    url = "https://api.vk.com/method/users.get"
    params = {
        "user_ids": user_id,
        "access_token": ACCESS_TOKEN,
        "v": "5.131",
        "fields": "first_name,last_name,sex,bdate,city,country,photo_max_orig,domain"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "error" in data:
            print(f"–û—à–∏–±–∫–∞: {data['error']['error_msg']}")
            return None

        return data["response"][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def format_user_info(user_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if not user_data:
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."

    info = [
        f"–ò–º—è: {user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"–§–∞–º–∏–ª–∏—è: {user_data.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: https://vk.com/{user_data.get('domain', '')}"
    ]

    if "bdate" in user_data:
        info.append(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['bdate']}")

    sex = {1: "–ñ–µ–Ω—Å–∫–∏–π", 2: "–ú—É–∂—Å–∫–æ–π"}.get(user_data.get("sex"), "–ù–µ —É–∫–∞–∑–∞–Ω")
    info.append(f"–ü–æ–ª: {sex}")

    if "city" in user_data:
        info.append(f"–ì–æ—Ä–æ–¥: {user_data['city']['title']} (ID: {user_data['city']['id']})")
    if "country" in user_data:
        info.append(f"–°—Ç—Ä–∞–Ω–∞: {user_data['country']['title']} (ID: {user_data['country']['id']})")

    if "photo_max_orig" in user_data:
        info.append(f"–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {user_data['photo_max_orig']}")

    return "\n".join(info)


def get_friends_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = "https://api.vk.com/method/friends.get"
    params = {
        "user_id": USER_ID,
        "access_token": ACCESS_TOKEN,
        "v": "5.131",
        "fields": "first_name,last_name"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "error" in data:
            print(f"–û—à–∏–±–∫–∞: {data['error']['error_msg']}")
            return []

        friends = data["response"]["items"]
        return friends

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def get_photo_albums():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = "https://api.vk.com/method/photos.getAlbums"
    params = {
        "owner_id": USER_ID,
        "access_token": ACCESS_TOKEN,
        "v": "5.131",
        "need_system": 1  # –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª—å–±–æ–º—ã
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "error" in data:
            print(f"–û—à–∏–±–∫–∞: {data['error']['error_msg']}")
            return []

        albums = data["response"]["items"]
        return albums

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def main():
    user_data = get_user_info(USER_ID)

    if user_data:
        print("\n–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(format_user_info(user_data))
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    friends = get_friends_list()
    if friends:
        print("\n–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:")
        for friend in friends:
            print(f"{friend['first_name']} {friend['last_name']} (ID: {friend['id']})")
    else:
        print("–î—Ä—É–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.")

    albums = get_photo_albums()
    if albums:
        print("\n–§–æ—Ç–æ–∞–ª—å–±–æ–º—ã:")
        for album in albums:
            print(f"{album['title']} (–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ: {album['size']})")
    else:
        print("–ê–ª—å–±–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.")


def print_banner() -> None:
    print("""
    üöÄ VK API üöÄ
    """)


def pretty_print(title: str, items: List[str], emoji: str) -> None:
    print(f"\n{emoji} {title}")
    print("‚îÄ" * 50)
    for item in items:
        print(f"  ‚Ä¢ {item}")


def format_friends(friends: List[Dict]) -> List[str]:
    return [f"{friend['first_name']} {friend['last_name']} üë§ ID: {friend['id']}" for friend in friends]


def format_albums(albums: List[Dict]) -> List[str]:
    return [f"{album['title']} üì∏ ({album['size']} —Ñ–æ—Ç–æ)" for album in albums]


def main():
    parser = argparse.ArgumentParser(description="ü¶ä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
    parser.add_argument('-i', '--info', action='store_true', help="üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    parser.add_argument('-f', '--friends', action='store_true', help="üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π")
    parser.add_argument('-a', '--albums', action='store_true', help="üì∑ –§–æ—Ç–æ–∞–ª—å–±–æ–º—ã")
    parser.add_argument('--all', action='store_true', help="üåà –í—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    args = parser.parse_args()
    print_banner()

    try:
        if args.all or not any(vars(args).values()):
            args.info = args.friends = args.albums = True

        if args.info:
            user_data = get_user_info(USER_ID)
            if user_data:
                info_lines = format_user_info(user_data).split('\n')
                pretty_print("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", info_lines, "üìã")
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

        if args.friends:
            friends = get_friends_list()
            if friends:
                pretty_print("–î—Ä—É–∑—å—è", format_friends(friends), "üë•")
            else:
                print("\nüòî –î—Ä—É–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        if args.albums:
            albums = get_photo_albums()
            if albums:
                pretty_print("–§–æ—Ç–æ–∞–ª—å–±–æ–º—ã", format_albums(albums), "üì∑")
            else:
                print("\nüì≠ –ê–ª—å–±–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


    except Exception as e:
        print(f"\nüî• –û—à–∏–±–∫–∞: {str(e)}")
        print("üöë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")



if __name__ == "__main__":
    main()
